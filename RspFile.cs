using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.CodeAnalysis.CSharp;

namespace Int19h.Bannerlord.CSharp.Scripting {
    internal class RspFile {
        public static readonly string Directory = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.Personal),
            "Mount and Blade II Bannerlord",
            "Configs"
        );

        public string Location { get; }

        public static readonly RspFile Generated;

        static RspFile() {
            Generated = new RspFile("csx.rsp");
            using (var writer = File.CreateText(Generated.Location)) {
                writer.WriteLine("# DO NOT EDIT THIS FILE!");
                writer.WriteLine("# It is automatically generated by csx, and will be overwritten.");
                writer.WriteLine();

                writer.WriteLine($"/r:\"{typeof(RspFile).Assembly.Location}\"");
                writer.WriteLine($"/r:\"{typeof(Microsoft.CSharp.RuntimeBinder.RuntimeBinderException).Assembly.Location}\"");
                var nss = new HashSet<string>();
                foreach (var asm in AppDomain.CurrentDomain.GetAssemblies()) {
                    if (asm.IsDynamic || string.IsNullOrEmpty(asm.Location)) {
                        continue;
                    }
                    writer.WriteLine($"/r:\"{asm.Location}\"");
                    foreach (var type in asm.GetExportedTypes()) {
                        if (type.Namespace != null && type.Namespace.StartsWith("TaleWorlds")) {
                            nss.Add(type.Namespace);
                        }
                    }
                }
                writer.WriteLine();

                writer.WriteLine("/u:System");
                writer.WriteLine("/u:System.Collections.Generic");
                writer.WriteLine("/u:System.Linq");
                writer.WriteLine("/u:System.Reflection");
                writer.WriteLine("/u:System.Text");
                foreach (var ns in nss) {
                    writer.WriteLine($"/u:{ns}");
                }
                writer.WriteLine($"/u:{typeof(ScriptGlobals).FullName}");
            }
        }

        public RspFile(string fileName) {
            Location = Path.Combine(Directory, fileName);
        }

        public CSharpCommandLineArguments Parse() {
            var baseDir = Path.GetDirectoryName(Location);
            var sdkDir = Path.GetDirectoryName(typeof(object).GetType().Assembly.ManifestModule.FullyQualifiedName);
            return CSharpCommandLineParser.Script.Parse(new[] { $"@{Location}" }, baseDir, sdkDir);
        }
    }
}
